import matplotlib.pyplot as plt
from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import BatchNormalization
from tensorflow.keras.utils import to_categorical
from keras.layers import Conv2D, MaxPool2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import SGD

(X_train,Y_train), (X_test,Y_test) = cifar10.load_data()

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

X_train /= 255
X_test /= 255

Y_train = to_categorical(Y_train)
Y_test = to_categorical(Y_test)


model = Sequential()

model.add(Conv2D(32, (3,3), activation= 'relu', kernel_initializer='he_uniform', padding= 'same', input_shape =(32,32,3) ))
model.add(BatchNormalization())
model.add(Conv2D(32, (3,3), activation= 'relu', kernel_initializer='he_uniform', padding= 'same'))
model.add(BatchNormalization())
model.add(MaxPool2D((2,2)))
model.add(Dropout(0.2))
model.add(Conv2D(64, (3,3), activation= 'relu', kernel_initializer='he_uniform', padding= 'same'))
model.add(BatchNormalization())
model.add(Conv2D(64, (3,3), activation= 'relu', kernel_initializer='he_uniform', padding= 'same'))
model.add(BatchNormalization())
model.add(MaxPool2D((2,2)))
model.add(Dropout(0.2))
model.add(Conv2D(128, (3,3), activation= 'relu', kernel_initializer='he_uniform', padding= 'same'))
model.add(BatchNormalization())
model.add(MaxPool2D((2,2)))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(10,activation= 'softmax'))

optimizer = SGD(learning_rate=0.001, momentum=0.95)
model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])
history = model.fit(X_train,Y_train,epochs=50, batch_size=64, validation_data=(X_test,Y_test), verbose=1)

model_result= model.evaluate(X_test,Y_test,verbose=0)
print('accuracy = %s' % (model_result[1]* 100.0))